Sistema de Ordens de Serviço

Um sistema completo para gestão de ordens de serviço, desenvolvido com React, Next.js e TypeScript.
O objetivo é oferecer uma ferramenta prática, moderna e intuitiva para acompanhar demandas do início ao fim.

Funcionalidades

Autenticação com login seguro e proteção de rotas

Listagem de ordens com filtros, busca e paginação

Detalhes das ordens exibidos em linha do tempo (timeline)

Dashboard de relatórios com estatísticas e gráficos

Gerenciamento de estado e cache com React Query

Tipagem forte com TypeScript

Testes unitários para os principais componentes

Tecnologias utilizadas

Next.js 14 (App Router)

React 19 e Tailwind CSS v4

shadcn/ui e Radix UI para componentes de interface

React Query para gerenciamento de estado

Recharts para gráficos

Jest e React Testing Library para testes

Lucide React para ícones

Como rodar o projeto
# Instalar dependências
npm install

# Executar em ambiente de desenvolvimento
npm run dev

# Rodar os testes
npm test

# Gerar build para produção
npm run build

Credenciais de teste

Email: admin@example.com

Senha: admin123

Estrutura do projeto
app/             # Páginas (login, ordens, relatórios)
components/      # Componentes React
contexts/        # Contextos de autenticação
lib/             # API mock, tipos e configurações
hooks/           # Custom hooks
__tests__/       # Testes unitários

Visual

O design utiliza um tema dark inspirado no estilo da Vercel:

Layout limpo e responsivo

Tipografia clara

Animações leves

Paleta de cores consistente

API

O sistema está preparado para consumir uma API real em C#.
Durante o desenvolvimento, utiliza dados mock, mas é possível configurar facilmente a integração:

NEXT_PUBLIC_API_URL=https://sua-api.com/api

Funcionalidades em detalhe

Autenticação: login, proteção de rotas e sessão persistente

Ordens de Serviço: filtros, busca, detalhes completos e linha do tempo

Relatórios: estatísticas gerais, gráficos e métricas de desempenho

Contribuindo

Este projeto é uma base de demonstração.
Sugestões de melhorias:

Implementar autenticação real (JWT ou OAuth)

Conectar ao backend em produção

Criar mais testes (integração e end-to-end)

Melhorar tratamento de erros e validação de formulários

Configurar CI/CD para automação
